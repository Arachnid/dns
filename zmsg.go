// *** DO NOT MODIFY ***
// AUTOGENERATED BY go generate from msg_generate.go

package dns

import (
	"encoding/base64"
	"net"
)

// pack*() functions

func (rr *A) pack(msg []byte, off int, compression map[string]int, compress bool) (int, error) {
	lenmsg := len(msg)
	off, err = packHeader(rr.Hdr, msg, off, compression, compress)
	if err != nil {
		return off, err
	}
	off, err = packDataA(rr.A, msg, off)
	if err != nil {
		return off, err
	}
	return off, nil
}

func (rr *AAAA) pack(msg []byte, off int, compression map[string]int, compress bool) (int, error) {
	lenmsg := len(msg)
	off, err = packHeader(rr.Hdr, msg, off, compression, compress)
	if err != nil {
		return off, err
	}
	off, err = packDataAAAA(rr.AAAA, msg, off)
	if err != nil {
		return off, err
	}
	return off, nil
}

func (rr *L32) pack(msg []byte, off int, compression map[string]int, compress bool) (int, error) {
	lenmsg := len(msg)
	off, err = packHeader(rr.Hdr, msg, off, compression, compress)
	if err != nil {
		return off, err
	}
	off, err = packUint16(rr.Preference, msg, off, lenmsg)
	if err != nil {
		return off, err
	}
	off, err = packDataA(rr.Locator32, msg, off)
	if err != nil {
		return off, err
	}
	return off, nil
}

func (rr *MX) pack(msg []byte, off int, compression map[string]int, compress bool) (int, error) {
	lenmsg := len(msg)
	off, err = packHeader(rr.Hdr, msg, off, compression, compress)
	if err != nil {
		return off, err
	}
	off, err = packUint16(rr.Preference, msg, off, lenmsg)
	if err != nil {
		return off, err
	}
	off, err = PackDomainName(rr.Mx, msg, off, compression, compress)
	if err != nil {
		return off, err
	}
	return off, nil
}
